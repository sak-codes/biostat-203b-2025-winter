---
title: "Biostat 203B Homework 3"
subtitle: "Due Feb 21 @ 11:59PM"
author:  "Sakshi Oza, 606542442"
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
---

Display machine information for reproducibility:
```{r}
sessionInfo()
```

Load necessary libraries (you can add more as needed).
```{r setup}
library(arrow)
library(gtsummary)
library(memuse)
library(pryr)
library(R.utils)
library(tidyverse)
library(lubridate)
```

Display your machine memory.
```{r}
memuse::Sys.meminfo()
```

In this exercise, we use tidyverse (ggplot2, dplyr, etc) to explore the [MIMIC-IV](https://physionet.org/content/mimiciv/3.1/) data introduced in [homework 1](https://ucla-biostat-203b.github.io/2025winter/hw/hw1/hw1.html) and to build a cohort of ICU stays.

## Q1. Visualizing patient trajectory

Visualizing a patient's encounters in a health care system is a common task in clinical data analysis. In this question, we will visualize a patient's ADT (admission-discharge-transfer) history and ICU vitals in the MIMIC-IV data.

### Q1.1 ADT history

A patient's ADT history records the time of admission, discharge, and transfer in the hospital. This figure shows the ADT history of the patient with `subject_id` 10001217 in the MIMIC-IV data. The x-axis is the calendar time, and the y-axis is the type of event (ADT, lab, procedure). The color of the line segment represents the care unit. The size of the line segment represents whether the care unit is an ICU/CCU. The crosses represent lab events, and the shape of the dots represents the type of procedure. The title of the figure shows the patient's demographic information and the subtitle shows top 3 diagnoses.

![](10001217_adt.png)
Do a similar visualization for the patient with `subject_id` 10063848 using ggplot.

Hint: We need to pull information from data files `patients.csv.gz`, `admissions.csv.gz`, `transfers.csv.gz`, `labevents.csv.gz`, `procedures_icd.csv.gz`, `diagnoses_icd.csv.gz`, `d_icd_procedures.csv.gz`, and `d_icd_diagnoses.csv.gz`. For the big file `labevents.csv.gz`, use the Parquet format you generated in Homework 2. For reproducibility, make the Parquet folder `labevents_pq` available at the current working directory `hw3`, for example, by a symbolic link. Make your code reproducible.

### Solution 1.1
```{r,eval = F}

system("gunzip -k ~/mimic/hosp/labevents.csv.gz")
```


```{r}
# Write the CSV file to Parquet format
arrow::write_dataset(
  open_dataset("~/mimic/hosp/labevents.csv.gz", format = "csv"),
  path = "./labevents_pq.parque",
  format = "parquet"
)
```

```{r}
arrow::write_dataset(
  open_dataset("~/mimic/icu/chartevents.csv.gz", format = "csv"),
  path = "./chartevents_pq.parque",
  format = "parquet"
)
```

```{r}
# File paths to the data files
patients_file <- "~/mimic/hosp/patients.csv.gz"
admissions_file <- "~/mimic/hosp/admissions.csv.gz"
transfers_file <- "~/mimic/hosp/transfers.csv.gz"
procedures_icd_file <- "~/mimic/hosp/procedures_icd.csv.gz"
diagnoses_icd_file <- "~/mimic/hosp/diagnoses_icd.csv.gz"
d_icd_procedures_file <- "~/mimic/hosp/d_icd_procedures.csv.gz"
d_icd_diagnoses_file <- "~/mimic/hosp/d_icd_diagnoses.csv.gz"
labevents_pq_dir <- "~/repos/biostat-203b-2025-winter/hw3/labevents_pq.parque"
```


```{r}
library(arrow)

patients <- read.csv(gzfile(patients_file))
admissions <- read.csv(gzfile(admissions_file))
transfers <- read.csv(gzfile(transfers_file))
procedures_icd <- read.csv(gzfile(procedures_icd_file))
diagnoses_icd <- read.csv(gzfile(diagnoses_icd_file))
d_icd_procedures <- read.csv(gzfile(d_icd_procedures_file))
d_icd_diagnoses <- read.csv(gzfile(d_icd_diagnoses_file))


```


```{r}
# Filter patient data for subject_id = 10063848
subject_id <- 10063848
```


```{r}
lab_events_dataset <- open_dataset(labevents_pq_dir)
labevents_data <- lab_events_dataset %>% 
  filter(subject_id == !!subject_id) %>%
  collect()
```

```{r}
head(labevents_data)
```

```{r}

patient_data <- patients %>% filter(subject_id == !!subject_id)
admissions_data <- admissions %>% filter(subject_id == !!subject_id)
transfers_data <- transfers %>% filter(subject_id == !!subject_id)
procedures_data <- procedures_icd %>% filter(subject_id == !!subject_id)
diagnoses_data <- diagnoses_icd %>% filter(subject_id == !!subject_id)
```


```{r}
# Extract necessary information
patient_info <- paste("Patient", subject_id, ",", patient_data$gender[1], ",", patient_data$anchor_age[1], "years old,", admissions_data$race[1])
diagnoses <- diagnoses_data %>%
  left_join(d_icd_diagnoses, by = "icd_code") %>%
  top_n(3, wt = "seq_num") %>%
  pull(long_title) 

diagnoses_text <- paste(head(diagnoses, 3), collapse = "\n")

# Convert intime and outtime to POSIXct format
transfers_data <- transfers_data %>%
  mutate(intime = as.POSIXct(intime, format = "%Y-%m-%d %H:%M:%S", tz = "UTC"),
         outtime = as.POSIXct(outtime, format = "%Y-%m-%d %H:%M:%S", tz = "UTC"))

# Prepare data for ADT events (Admission, Discharge, Transfer)
adt_data <- transfers_data %>%
  filter(careunit != "UNKNOWN") %>%  # Drop rows where careunit is "unknown"
  mutate(care_unit_duration = difftime(outtime, intime, units = "hours"),
         line_width = ifelse(grepl("icu", careunit, ignore.case = TRUE),
                             3, 2.5))


# Prepare lab event data
lab_data <- labevents_data %>%
  group_by(charttime) %>%
  summarise(n = n()) %>%
  mutate(event = "Lab")

# Prepare procedures data
procedures_data_1 <- procedures_data %>%
  left_join(d_icd_procedures, by = "icd_code") %>%
  mutate(event =
  case_when(icd_code == "Central venous catheter" ~ "Central venous catheter",
  icd_code == "Other incision of brain" ~ "Other incision of brain",
                           TRUE ~ "Spinal tap"))
procedures_data_1 <- procedures_data_1 %>%
  mutate(chartdate = as.POSIXct(chartdate, format = "%Y-%m-%d"))
```


```{r}
ggplot() +
  # Procedure events
  geom_point(data = procedures_data_1, 
             aes(x = chartdate,
                 y = factor("Procedure", 
                            levels = c("ADT", "Lab", "Procedure")), 
                 shape = long_title), 
             size = 3, position = position_nudge(y = 0)) +
  
  # Lab events
  geom_point(data = lab_data, 
             aes(x = charttime,
                 y = factor("Lab",
                            levels = c("ADT", "Lab", "Procedure"))), 
             shape = '+', size = 4, position = position_nudge(y = 0)) +

  # ADT events
  geom_segment(data = adt_data, 
               aes(x = intime, xend = outtime, 
                   y = factor("ADT", levels = c("ADT", "Lab", "Procedure")), 
                   yend = factor("ADT", levels = c("ADT", "Lab", "Procedure")),
                   color = careunit, linewidth = line_width), 
               show.legend = c(linewidth = FALSE)) + 
  
  
  #ggtitle(paste(patient_info, "\n", diagnoses_text)) +
  ggtitle(patient_info, subtitle = diagnoses_text) +

  # Axis labels
  xlab("Calendar Time") + 
  ylab("") +

  
  labs(shape = "Procedure") +
  labs(color = "Care Unit") +
  
  guides(color = guide_legend(order = 1), shape = guide_legend(order = 2)) +
guides(
  shape = guide_legend(nrow = 3),  
  color = guide_legend(nrow = 2)  
) +
  theme_minimal() +
  
  coord_cartesian(clip = "off") + 
theme(
  plot.margin = margin(1, 1, 1, 1),      
  legend.position = "bottom",
  legend.box = "vertical",
  legend.text = element_text(size = 5),
  legend.title  = element_text(size = 8)
)
```

### Q1.2 ICU stays

ICU stays are a subset of ADT history. This figure shows the vitals of the patient `10001217` during ICU stays. The x-axis is the calendar time, and the y-axis is the value of the vital. The color of the line represents the type of vital. The facet grid shows the abbreviation of the vital and the stay ID.

![](10001217_icu.png)

Do a similar visualization for the patient `10063848`.

### Solution 1.2
```{r}
arrow::write_dataset(
  open_dataset("~/mimic/icu/procedureevents.csv.gz", format = "csv"),
  path = "./procedureevents_pq.parque",
  format = "parquet"
)
```

```{r}
chartevents_pq_dir<- "~/repos/biostat-203b-2025-winter/hw3/chartevents_pq.parque"
```



```{r}
subject_id <- 10063848
```

```{r}
chartevents_dataset <- open_dataset(chartevents_pq_dir)
chartevents_data <- chartevents_dataset %>% 
  filter(subject_id == !!subject_id) %>%
  collect()
```



```{r}
library(ggplot2)

# Filter data to include the relevant vitals
vital_data <- chartevents_data %>%
  filter(itemid %in% c(220045, 220180, 220179, 223761, 220210)) %>%
  mutate(vital_type = case_when(
    itemid == 220045 ~ "HR",
    itemid == 220180 ~ "NBPd",
    itemid == 220179 ~ "NBPs",
    itemid == 220210 ~ "RR",
    itemid == 223761 ~ "Temparature Farhenheit",
    TRUE ~ NA_character_
    ),
    )

# Create a line plot for the vitals
ggplot(vital_data, aes(x = charttime, y = valuenum, color = vital_type)) +
  geom_line() +
  geom_point()+
  
  
  # Facet by vital type and stay_id
  facet_grid(vital_type ~ stay_id, scales = "free") +
  scale_x_datetime(
    labels = function(x) {
      labels <- format(x, "%b %d %H:%M")
      labels_alternate <- ifelse(seq_along(labels) %% 2 == 0,
                                 paste0("\n", labels), 
                                 labels) 
      return(labels_alternate)
    }
  ) +
  labs(
    title = paste("Patient",subject_id,"ICU stays - Vitals"),
    x= NULL,
    y= NULL,
    color ="Vital"
  )+
  # Set a theme for clarity
  theme_minimal() +
  
  # Adjust legend position
theme(
 
    strip.text.x = element_text(size = 8, face = "bold", color = "white"), 
    strip.text.y = element_text(size = 8, face = "bold", color = "white"), 
    strip.background = element_rect(fill = "darkgray", color = "white"),
    
  axis.text.x = element_text(angle = 0 , hjust = 1),
  panel.border = element_rect(color = "lightgray", fill = NA, size = 0.5),  
     panel.spacing.x = unit(0.75, "cm"),
    legend.position = "bottom"  ,
    
  )

```


## Q2. ICU stays

`icustays.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/icu/icustays/>) contains data about Intensive Care Units (ICU) stays. The first 10 lines are
```{bash, eval=F}
zcat < ~/mimic/icu/icustays.csv.gz | head
```

### Q2.1 Ingestion


```{r}
# Load necessary libraries
library(tibble)
library(readr)

# Import icustays.csv.gz as a tibble
icustays_tble <- read_csv("~/mimic/icu/icustays.csv.gz") %>%
  as_tibble()

# Check the first few rows of the tibble
print(head(icustays_tble),10)

```


### Q2.2 Summary and visualization

How many unique `subject_id`? Can a `subject_id` have multiple ICU stays? Summarize the number of ICU stays per `subject_id` by graphs. 
```{r}
library(plotly)
```

```{r}
# Count the number of ICU stays per subject
icu_stays_summary <- icustays_tble %>%
  group_by(subject_id) %>%
  summarise(icu_stay_count = n()) %>%
  arrange(desc(icu_stay_count))
print(icu_stays_summary)
```

```{r}
p <- ggplot(icu_stays_summary, aes(x = icu_stay_count)) +
  geom_bar(fill = "skyblue", color = "black") +
  labs(
    title = "Number of ICU Stays per Subject",
    x = "ICU Stay Count",
    y = "Number of Subjects"
  ) +
  theme_minimal()

# Convert to an interactive plot using plotly
interactive_plot <- ggplotly(p)

# Display the plot
interactive_plot
```

## Q3. `admissions` data

Information of the patients admitted into hospital is available in `admissions.csv.gz`. See <https://mimic.mit.edu/docs/iv/modules/hosp/admissions/> for details of each field in this file. The first 10 lines are
```{bash,eval = F}
zcat < ~/mimic/hosp/admissions.csv.gz | head
```

### Q3.1 Ingestion

Import `admissions.csv.gz` as a tibble `admissions_tble`.
```{r}
# Import icustays.csv.gz as a tibble
admissions_tble <- read_csv("~/mimic/hosp/admissions.csv.gz") %>%
  as_tibble()

# Check the first few rows of the tibble
print(admissions_tble)
```


### Q3.2 Summary and visualization

Summarize the following information by graphics and explain any patterns you see.

- number of admissions per patient  
- admission hour (anything unusual?)  
- admission minute (anything unusual?)  
- length of hospital stay (from admission to discharge) (anything unusual?)  

According to the [MIMIC-IV documentation](https://mimic.mit.edu/docs/iv/about/concepts/#date-shifting), 

 All dates in the database have been shifted to protect patient confidentiality. Dates will be internally consistent for the same patient, but randomly distributed in the future. Dates of birth which occur in the present time are not true dates of birth. Furthermore, dates of birth which occur before the year 1900 occur if the patient is older than 89. In these cases, the patient’s age at their first admission has been fixed to 300.

Admissions per patient
```{r}
library(plotly)

# Number of admissions per patient
admissions_per_patient <- admissions_tble %>%
  group_by(subject_id) %>%
  summarise(admission_count = n())

# Static ggplot2 plot
p1 <- ggplot(admissions_per_patient, aes(x = admission_count)) +
  geom_histogram(binwidth = 2, fill = "skyblue", color = "black") +
  labs(
    title = "Number of Admissions per Patient",
    x = "Number of Admissions",
    y = "Number of Patients"
  ) +
  theme_minimal()

# Convert to interactive plot
ggplotly(p1)

```
The "Number of Admissions per Patient" histogram demonstrates a highly skewed distribution, with a significant majority of patients experiencing only a single admission.  Visually, the first bar on the histogram is dramatically taller than all subsequent bars, indicating a disproportionately high count of single admissions. This indicates that most hospital visits are likely for acute conditions or short-term procedures.  The rapid decline in patient counts with increasing admissions points to a smaller cohort requiring multiple hospitalizations.


Admission hour
```{r}
# Extract admission hour
admissions_hour <- admissions_tble %>%
  mutate(admission_hour = hour(admittime)) %>%
  group_by(admission_hour) %>%
  summarise(count = n())

# Static ggplot2 plot
p2 <- ggplot(admissions_hour, aes(x = admission_hour, y = count)) +
  geom_line(color = "blue", size = 1) +
  labs(
    title = "Admission Hour Distribution",
    x = "Hour of Admission",
    y = "Number of Admissions"
  ) +
  theme_minimal()

# Convert to interactive plot
ggplotly(p2)

```
The "Admission Hour Distribution" graph reveals a notable peak in admissions at midnight, suggesting administrative or system-related influences. The midnight peak is the highest point on the graph, significantly exceeding the values observed in other hours. A decrease in admissions is observed during early morning hours, followed by increases during mid-morning and afternoon, reflecting scheduled procedures and emergency department activity.  A plateau in the evening indicates sustained hospital activity, with a subsequent decline late at night.

admission minute
```{r}
# Extract admission minute
admissions_minute <- admissions_tble %>%
  mutate(admission_minute = minute(admittime)) %>%
  group_by(admission_minute) %>%
  summarise(count = n())

# Static ggplot2 plot
p3 <- ggplot(admissions_minute, aes(x = admission_minute, y = count)) +
  geom_line(color = "green", size = 1) +
  labs(
    title = "Admission Minute Distribution",
    x = "Minute of Admission",
    y = "Number of Admissions"
  ) +
  theme_minimal()

# Convert to interactive plot
ggplotly(p3)

```
The "Admission Minute Distribution" graph displays peculiar peaks at specific minutes (approximately 0, 15, 30, and 45). These peaks are significantly higher than the baseline values, indicating a concentration of recorded admissions at these specific minutes. These peaks are likely artifacts of data recording practices, such as rounding or default values in the electronic health record system, rather than actual variations in admission frequency. This raises concerns about the accuracy of minute-level data.

length of hospital stay
```{r}
# Required libraries


# Calculate length of stay in days
admissions_tble <- admissions_tble %>%
  mutate(
    length_of_stay = as.numeric(difftime(dischtime, admittime, units = "days"))
  )

# Plot a histogram for length of stay with x-axis limited to 0-100 days
plot <- ggplot(admissions_tble, aes(x = length_of_stay)) +
  geom_histogram(binwidth = 2, fill = "skyblue", color = "black") +
  xlim(0, 100) +  # Limit x-axis to 0-100 days
  labs(
    title = "Distribution of Length of Hospital Stay ",
    x = "Length of Stay (Days)",
    y = "Count of Admissions"
  ) +
  theme_minimal()

# Convert to interactive plot with plotly
interactive_plot <- ggplotly(plot)

# Show the plot
interactive_plot

```
The "Distribution of Length of Hospital Stay" histogram shows a strongly skewed distribution, with the highest frequency of admissions occurring at very short lengths of stay.  The histogram indicates that the majority of admissions result in brief hospitalizations, while a long tail on the right side of the graph signifies a smaller proportion of patients requiring extended stays exceeding 50 days, likely due to complex medical needs or surgical procedures.

- The high count of single admissions in the "Number of Admissions per Patient" graph directly corresponds to the high frequency of short stays in the "Distribution of Length of Hospital Stay" graph. This suggests that a large portion of single admissions are associated with brief hospitalizations.
- The significant midnight peak in the "Admission Hour Distribution" graph might contribute to the high number of single admissions and short stays, as these midnight admissions could be related to administrative procedures or short-term observations.
- The data recording anomalies in the "Admission Minute Distribution" graph raise concerns about the accuracy of time-related analyses, which could potentially affect the interpretation of length of stay and admission frequency data.


## Q4. `patients` data
Patient information is available in `patients.csv.gz`. See <https://mimic.mit.edu/docs/iv/modules/hosp/patients/> for details of each field in this file. The first 10 lines are
```{bash, eval=F}
zcat < ~/mimic/hosp/patients.csv.gz | head
```

### Q4.1 Ingestion

Import `patients.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/hosp/patients/>) as a tibble `patients_tble`.

```{r}
# Import patients.csv.gz as a tibble
patients_tble <- read_csv("~/mimic/hosp/patients.csv.gz") %>%
  as_tibble()

# Check the first few rows of the tibble
print(patients_tble)
```

### Q4.2 Summary and visualization

Summarize variables `gender` and `anchor_age` by graphics, and explain any patterns you see.

```{r}
# Load necessary libraries
library(ggplot2)

# Gender distribution
ggplot(patients_tble, aes(x = gender)) +
  geom_bar(fill = "lightblue", color = "black") +
  labs(title = "Distribution of Gender", x = "Gender", y = "Count") +
  theme_minimal()
```
The  bar chart shows the distribution of gender. Here, the counts of females (F) and males (M) are displayed. While both genders are well-represented, there are slightly more females than males. 

```{r}

library(plotly)

# Create the histogram plot
p <- ggplot(patients_tble, aes(x = anchor_age)) +
  geom_histogram(binwidth = 2, fill = "lightgreen", color = "black") +
  labs(title = "Distribution of Anchor Age", x = "Anchor Age", y = "Count") +
  theme_minimal()

# Convert the ggplot to an interactive plotly plot
ggplotly(p)


```
- The younger peak could correspond to more frequent hospitalization of adults for acute conditions, accidents, or surgeries.
- The older peak reflects elderly patients often requiring ICU care for chronic conditions or age-related ailments.
- The spike at the right indicates the dataset's anonymization strategy for older patients, aggregating all patients above 89 into a single category to ensure privacy.
The spike at age 89-100 likely results from an anonymization process used in MIMIC. For privacy reasons, patients over a certain age (usually around 89) are assigned an anchor age of 90+. This is done to reduce the risk of identifying older individuals who could be more easily recognized due to their age. Hence, the spike on the right represents a group of patients who are over 89 years old, but whose exact ages have been masked.

## Q5. Lab results

`labevents.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/hosp/labevents/>) contains all laboratory measurements for patients. The first 10 lines are
```{bash, eval=F}
zcat < ~/mimic/hosp/labevents.csv.gz | head
```

`d_labitems.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/hosp/d_labitems/>) is the dictionary of lab measurements. 
```{bash, eval=F}
zcat < ~/mimic/hosp/d_labitems.csv.gz | head
```

We are interested in the lab measurements of creatinine (50912), potassium (50971), sodium (50983), chloride (50902), bicarbonate (50882), hematocrit (51221), white blood cell count (51301), and glucose (50931). Retrieve a subset of `labevents.csv.gz` that only containing these items for the patients in `icustays_tble`. Further restrict to the last available measurement (by `storetime`) before the ICU stay. The final `labevents_tble` should have one row per ICU stay and columns for each lab measurement.
Hint: Use the Parquet format you generated in Homework 2. For reproducibility, make `labevents_pq` folder available at the current working directory `hw3`, for example, by a symbolic link.

![](labevents_tble.png)
### Solution 5

```{r}
icustays_tble <- read_csv("~/mimic/icu/icustays.csv.gz",show_col_types = FALSE) %>%
  as_tibble()
```


```{r}
dlabitems_tble <- read_csv("~/mimic/hosp/d_labitems.csv.gz",show_col_types = FALSE) |>
  filter(itemid %in% c(
    50912,
    50971,
    50983,
    50902,
    50882,
    51221,
    51301,
    50931
  )) |>
  mutate(itemid = as.integer(itemid)) 


```

```{r}
library(arrow)
library(duckdb)
library(dplyr)
library(tidyr)
library(stringr)

# Open the parquet dataset
labevents_tble <- open_dataset(labevents_pq_dir, format = "parquet")
```


```{r}
labs_data <- labevents_tble |>
  to_duckdb() |>

  
  # Select necessary variables
  select(subject_id, itemid, storetime, valuenum) |>
  
  # Filter for itemid of interest
  filter(itemid %in% dlabitems_tble$itemid) |>
  
  # Join with icustays table to get intime
  left_join(
    select(icustays_tble, subject_id, stay_id, intime),
    by = c("subject_id"),
    copy = TRUE
  ) |>
  
  # Filter to keep only records before ICU intime
  filter(storetime < intime) |>
  
  # Group by subject_id, stay_id, and itemid
  group_by(subject_id, stay_id, itemid) |>
  
  # Keep only the last storetime for each item before intime
  slice_max(storetime, n = 1) |>
  
  # Remove storetime and intime columns, ungroup the data
  select(-storetime, -intime) |>
  ungroup() |>
  
  # Pivot wider to make itemid names as columns
  pivot_wider(names_from = itemid, values_from = valuenum) |>
  
  # Rename columns based on dlabitems_tble labels
  rename_at(
    vars(as.character(dlabitems_tble$itemid)),
    ~str_to_lower(dlabitems_tble$label)
  ) |>
  
  # Rename specific columns (e.g., white blood cells)
  rename(wbc = `white blood cells`) |>
  
  # Show the query for debugging purposes
  show_query() |>
  
  # Collect the results into an R dataframe
  collect() |>
  relocate(subject_id,stay_id,bicarbonate,chloride,creatinine,glucose,
  potassium, sodium,hematocrit, wbc)|>
  
  # Arrange by subject_id and stay_id
  arrange(subject_id, stay_id)  %>%
  
  
  # Print the dataframe with full width
  print(labs_data,width=Inf)

```

## Q6. Vitals from charted events

`chartevents.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/icu/chartevents/>) contains all the charted data available for a patient. During their ICU stay, the primary repository of a patient’s information is their electronic chart. The `itemid` variable indicates a single measurement type in the database. The `value` variable is the value measured for `itemid`. The first 10 lines of `chartevents.csv.gz` are
```{bash, eval= F}
zcat < ~/mimic/icu/chartevents.csv.gz | head
```

`d_items.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/icu/d_items/>) is the dictionary for the `itemid` in `chartevents.csv.gz`. 
```{bash, eval= F}
zcat < ~/mimic/icu/d_items.csv.gz | head
```

We are interested in the vitals for ICU patients: heart rate (220045), systolic non-invasive blood pressure (220179), diastolic non-invasive blood pressure (220180), body temperature in Fahrenheit (223761), and respiratory rate (220210). Retrieve a subset of `chartevents.csv.gz` only containing these items for the patients in `icustays_tble`. Further restrict to the first vital measurement within the ICU stay. The final `chartevents_tble` should have one row per ICU stay and columns for each vital measurement. 

![](chartevents_tble.png)

Hint: Use the Parquet format you generated in Homework 2. For reproducibility, make `chartevents_pq` folder available at the current working directory, for example, by a symbolic link.

### Solution 6
```{r}
# Load necessary tables
chartevents_tble <- open_dataset("~/repos/biostat-203b-2025-winter/hw3/chartevents_pq.parque", format = "parquet")
```

```{r}
# List of vital item IDs
vitals_itemids <- c(
  220045,  # Heart rate
  220179,  # Systolic non-invasive blood pressure
  220180,  # Diastolic non-invasive blood pressure
  223761,  # Body temperature (Fahrenheit)
  220210   # Respiratory rate
)

# Filter `chartevents` for the relevant itemids and join with `icustays_tble`
vitals_data <- chartevents_tble |>
  to_duckdb() |>
  
  # Select required variables
  select(subject_id, stay_id, itemid, charttime, value,valuenum,storetime) |>
  
  # Filter for vitals itemids of interest
  filter(itemid %in% vitals_itemids) |>
  
  # Join with icustays table to get intime
  left_join(
    select(icustays_tble, subject_id, stay_id, intime,outtime),
    by = c("subject_id", "stay_id"),
    copy = TRUE
  ) |>
  
  filter(storetime >= intime & storetime <= outtime) |>
  filter(!is.na(valuenum)) |>
  
  # Group by subject, stay, and itemid
  group_by(subject_id, stay_id, itemid) |>
  slice_min(storetime, with_ties = TRUE) |>
  
  # Calculate the average value for each itemid during the ICU stay
  summarise(mean = mean(valuenum, na.rm = TRUE)) |>
  
  # Ungroup
  
  ungroup() |>
  
  # Pivot to wider format to make itemid names as columns
  pivot_wider(names_from = itemid, values_from = mean) |>
  
  # Rename columns to meaningful names
  rename(
    heart_rate = `220045`,
    non_invasive_bloodpressue_systolic = `220179`,
    non_invasive_bloodpressure_diastolic = `220180`,
    temperature_farhenheit = `223761`,
    respiratory_rate = `220210`
  ) |>
  mutate(
    heart_rate = round(heart_rate, 1),
    non_invasive_bloodpressue_systolic = 
      round(non_invasive_bloodpressue_systolic, 1),
    non_invasive_bloodpressure_diastolic = 
      round(non_invasive_bloodpressure_diastolic, 1),
    temperature_farhenheit = round(temperature_farhenheit, 1),
    respiratory_rate = round(respiratory_rate, 1)
  ) |>
  
  # Collect the results
  collect() |>
  relocate(subject_id,stay_id,heart_rate,non_invasive_bloodpressure_diastolic,
  non_invasive_bloodpressue_systolic, respiratory_rate,temperature_farhenheit)|>
  
  # Arrange by subject_id and stay_id
  arrange(subject_id, stay_id) |>
  
  # Print with full width
  print(width = Inf)




```

## Q7. Putting things together

Let us create a tibble `mimic_icu_cohort` for all ICU stays, where rows are all ICU stays of adults (age at `intime` >= 18) and columns contain at least following variables

- all variables in `icustays_tble`  
- all variables in `admissions_tble`  
- all variables in `patients_tble`
- the last lab measurements before the ICU stay in `labevents_tble` 
- the first vital measurements during the ICU stay in `chartevents_tble`

The final `mimic_icu_cohort` should have one row per ICU stay and columns for each variable.

![](mimic_icu_cohort.png)

### Solution 7

```{r}
mimic_icu_cohort <- icustays_tble %>%
  left_join(patients,by = "subject_id")  %>%
  left_join(admissions
            , by = c("hadm_id","subject_id")) %>%
  left_join(vitals_data,by = c("subject_id","stay_id")) %>%
  left_join(labs_data,by=c("subject_id","stay_id"))%>%
  mutate(
    intime_year = year(intime),  # Extract year from ICU admission time
    age_intime = anchor_age + (intime_year - anchor_year)  # Calculate age at ICU admission
  ) %>%
  
  # Optionally remove the intermediate intime_year column
  select(-intime_year)

print(mimic_icu_cohort,width=Inf)
  

  
```

## Q8. Exploratory data analysis (EDA)

Summarize the following information about the ICU stay cohort `mimic_icu_cohort` using appropriate numerics or graphs:

- Length of ICU stay `los` vs demographic variables (race, insurance, marital_status, gender, age at intime)
```{r}
# Load necessary libraries
library(ggplot2)
library(dplyr)

# Create summary statistics for the ICU cohort
summary_stats <- mimic_icu_cohort %>%
  group_by(race, insurance, marital_status, gender) %>%
  summarise(
    mean_los = mean(los, na.rm = TRUE),
    median_los = median(los, na.rm = TRUE),
    sd_los = sd(los, na.rm = TRUE),
    IQR_los = IQR(los, na.rm = TRUE),
    .groups = 'drop'
  )

# Print summary statistics
print(summary_stats)

# Plot 1: Boxplot of los vs race
ggplot(mimic_icu_cohort, aes(x = race, y = los)) +
  geom_boxplot() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(title = "Length of ICU Stay (LOS) by Race", x = "Race", 
       y = "LOS (days)")

# Plot 2: Boxplot of los vs insurance
ggplot(mimic_icu_cohort, aes(x = insurance, y = los)) +
  geom_boxplot() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(title = "Length of ICU Stay (LOS) by Insurance", 
       x = "Insurance", y = "LOS (days)")

# Plot 3: Boxplot of los vs marital status
ggplot(mimic_icu_cohort, aes(x = marital_status, y = los)) +
  geom_boxplot() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(title = "Length of ICU Stay (LOS) by Marital Status", 
       x = "Marital Status", y = "LOS (days)")

# Plot 4: Boxplot of los vs gender
ggplot(mimic_icu_cohort, aes(x = gender, y = los)) +
  geom_boxplot() +
  labs(title = "Length of ICU Stay (LOS) by Gender", 
       x = "Gender", y = "LOS (days)")

# Plot 5: Scatter plot of los vs age at intime (age_intime)
ggplot(mimic_icu_cohort, aes(x = age_intime, y = los)) +
  geom_point(color="lightpink",alpha = 0.5) +
  labs(title = "Length of ICU Stay (LOS) by Age at Admission",
       x = "Age at Admission (years)", y = "LOS (days)")

  
```


- Length of ICU stay `los` vs the last available lab measurements before ICU stay
```{r}
# Load necessary libraries
library(ggplot2)
library(dplyr)

# Binning lab measurements for box plot representation
mimic_icu_cohort <- mimic_icu_cohort %>%
  mutate(glucose_bin = cut(glucose, breaks = 5),
         sodium_bin = cut(sodium, breaks = 5),
         potassium_bin = cut(potassium, breaks = 5),
         wbc_bin = cut(wbc, breaks = 5),
         creatinine_bin = cut(creatinine, breaks = 5))

# Plot 1: Boxplot of LOS vs Glucose bins
ggplot(mimic_icu_cohort, aes(x = glucose_bin, y = los)) +
  geom_point(color="lightblue",alpha = 0.6) +
  geom_smooth(method = "lm",se = FALSE, color = "blue") +
  labs(title = "LOS vs Glucose", x = "Glucose Bins (mg/dL)",
       y = "Length of ICU Stay (days)") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# Plot 2: Boxplot of LOS vs Sodium bins
ggplot(mimic_icu_cohort, aes(x = sodium_bin, y = los)) +
  geom_point(color="lightblue",alpha = 0.6) +
  geom_smooth(method = "lm",se = FALSE, color = "blue") +
  labs(title = "LOS vs Sodium", x = "Sodium Bins (mEq/L)",
       y = "Length of ICU Stay (days)") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# Plot 3: Boxplot of LOS vs Potassium bins
ggplot(mimic_icu_cohort, aes(x = potassium_bin, y = los)) +
  geom_point(color="lightblue",alpha = 0.6) +
  geom_smooth(method = "lm",se = FALSE, color = "blue") +
  labs(title = "LOS vs Potassium", x = "Potassium Bins (mEq/L)",
       y = "Length of ICU Stay (days)") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# Plot 4: Boxplot of LOS vs WBC bins
ggplot(mimic_icu_cohort, aes(x = wbc_bin, y = los)) +
  geom_point(color="lightblue",alpha = 0.6) +
  geom_smooth(method = "lm",se = FALSE, color = "blue") +
  labs(title = "LOS vs WBC", x = "WBC Bins (K/uL)", 
       y = "Length of ICU Stay (days)") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

# Plot 5: Boxplot of LOS vs Creatinine bins
ggplot(mimic_icu_cohort, aes(x = creatinine_bin, y = los)) +
  geom_point(color="lightblue",alpha = 0.6) +
  geom_smooth(method = "lm",se = FALSE, color = "blue") +
  labs(title = "LOS vs Creatinine", x = "Creatinine Bins (mg/dL)",
       y = "Length of ICU Stay (days)") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))


```



- Length of ICU stay `los` vs the first vital measurements within the ICU stay
```{r}
# Load necessary libraries
library(ggplot2)

# Plot 1: Scatter plot of LOS vs Heart Rate
ggplot(mimic_icu_cohort, aes(x = heart_rate, y = los)) +
  geom_point(color="lightblue",alpha = 0.6) +
  geom_smooth(method = "lm",se = FALSE, color = "blue") +
  labs(title = "LOS vs Heart Rate", x = "Heart Rate (bpm)",
       y = "Length of ICU Stay (days)") +
  theme_minimal()

# Plot 2: Scatter plot of LOS vs Systolic Blood Pressure
ggplot(mimic_icu_cohort, aes(x = non_invasive_bloodpressue_systolic, y = los)) +
  geom_point(color="lightblue",alpha = 0.6) +
  geom_smooth(method = "lm",se= FALSE, color = "blue") +
  labs(title = "LOS vs Systolic Blood Pressure", x = "Systolic BP (mmHg)",
       y = "Length of ICU Stay (days)") +
  theme_minimal()

# Plot 3: Scatter plot of LOS vs Diastolic Blood Pressure
ggplot(mimic_icu_cohort, 
       aes(x = non_invasive_bloodpressure_diastolic, y = los)) +
  geom_point(color="lightblue",alpha = 0.6) +
  geom_smooth(method = "lm",se=FALSE, color = "blue") +
  labs(title = "LOS vs Diastolic Blood Pressure",
       x = "Diastolic BP (mmHg)",
       y = "Length of ICU Stay (days)") +
  theme_minimal()

# Plot 4: Scatter plot of LOS vs Body Temperature
ggplot(mimic_icu_cohort, aes(x = temperature_farhenheit, y = los)) +
  geom_point(color="lightblue",alpha = 0.6) +
  geom_smooth(method = "lm",se=FALSE, color = "blue") +
  labs(title = "LOS vs Body Temperature", x = "Body Temperature (°C)",
       y = "Length of ICU Stay (days)") +
  theme_minimal()

# Plot 5: Scatter plot of LOS vs Respiratory Rate
ggplot(mimic_icu_cohort, aes(x = respiratory_rate, y = los)) +
  geom_point(color="lightblue",alpha = 0.6) +
  geom_smooth(method = "lm",se=FALSE, color = "blue") +
  labs(title = "LOS vs Respiratory Rate", x = "Respiratory Rate (breaths/min)",
       y = "Length of ICU Stay (days)") +
  theme_minimal()


```



- Length of ICU stay `los` vs first ICU unit
```{r}
ggplot(mimic_icu_cohort, aes(x = los, y = first_careunit)) +
  geom_boxplot(color="black",fill="lightpink",alpha = 0.6) +
  
  labs(title = "LOS vs first ICU unit", x = "Respiratory Rate (breaths/min)", 
       y = "Length of ICU Stay (days)") +
  theme_minimal()

```


