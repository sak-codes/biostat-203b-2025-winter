---
title: "Biostat 203B Homework 2"
subtitle: Due Feb 7, 2025 @ 11:59PM
author: "Sakshi Oza , 606542442"
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
    link-external-icon: true
    link-external-newwindow: true
---

Display machine information for reproducibility:

```{r}
sessionInfo()
```

Load necessary libraries (you can add more as needed).
```{r setup}
library(arrow)
library(data.table)
library(duckdb)
library(memuse)
library(pryr)
library(R.utils)
library(tidyverse)
```

Display memory information of your computer

```{r}
memuse::Sys.meminfo()
```

In this exercise, we explore various tools for ingesting the [MIMIC-IV](https://physionet.org/content/mimiciv/3.1/) data introduced in [homework 1](https://ucla-biostat-203b.github.io/2025winter/hw/hw1/hw1.html).

Display the contents of MIMIC `hosp` and `icu` data folders:

```{bash}
ls -l ~/mimic/hosp/
```

```{bash}
ls -l ~/mimic/icu/
```

## Q1. `read.csv` (base R) vs `read_csv` (tidyverse) vs `fread` (data.table)

### Solution 1.1: Speed, memory, and data types

There are quite a few utilities in R for reading plain text data files. Let us test the speed of reading a moderate sized compressed csv file, `admissions.csv.gz`, by three functions: `read.csv` in base R, `read_csv` in tidyverse, and `fread` in the data.table package.

Which function is fastest? Is there difference in the (default) parsed data types? How much memory does each resultant dataframe or tibble use? (Hint: `system.time` measures run times; `pryr::object_size` measures memory usage; all these readers can take gz file as input without explicit decompression.) 

```{r}
# Measure time and memory for read.csv (base R)
time_read_csv_base <- system.time({
  data_base <- read.csv("~/mimic/hosp/admissions.csv.gz")
})
memory_read_csv_base <- object_size(data_base)

# Measure time and memory for read_csv (tidyverse)
time_read_csv_tidyverse <- system.time({
  data_tidyverse <- read_csv("~/mimic/hosp/admissions.csv.gz",
                             show_col_types = FALSE)

})
memory_read_csv_tidyverse <- object_size(data_tidyverse)

# Measure time and memory for fread (data.table)
time_read_fread <- system.time({
  data_fread <- fread("~/mimic/hosp/admissions.csv.gz")
})
memory_read_fread <- object_size(data_fread)

```

```{r}
# Output the results for runtime
cat("Runtime (in seconds):\n")
cat("Base R read.csv: ", time_read_csv_base["elapsed"], " seconds\n")
cat("Tidyverse read_csv: ", time_read_csv_tidyverse["elapsed"], " seconds\n")
cat("Data.table fread: ", time_read_fread["elapsed"], " seconds\n\n")

# Output the memory usage
cat("Memory usage (in bytes):\n")
cat("Base R read.csv: ", memory_read_csv_base, " bytes\n")
cat("Tidyverse read_csv: ", memory_read_csv_tidyverse, " bytes\n")
cat("Data.table fread: ", memory_read_fread, " bytes\n")
```
1. Fastest Function: 
- `fread` from the `data.table` package is the fastest, with a runtime of approx **0.286 seconds**.

2. Difference in Parsed Data Types:
- `read.csv` (base R) converts character columns into factors by default.
- `read_csv` (tidyverse) and `fread` (data.table) do **not** convert characters to factors by default, and they infer column types automatically.

3. Memory Usage:
- `fread` (data.table) is the most memory-efficient, using approx **63,465,008 bytes** (~63 MB).
- `read_csv` (tidyverse) is the second most efficient, using approx **70,022,592 bytes** (~70 MB).
- `read.csv` (base R) uses the most memory at approx **200,098,832 bytes** (~200 MB)

### Solution 1.2: User-supplied data types

Re-ingest `admissions.csv.gz` by indicating appropriate column data types in `read_csv`. Does the run time change? How much memory does the result tibble use? (Hint: `col_types` argument in `read_csv`.)

```{r}
# Measure time and memory usage for read_csv without col_types
time_read_csv_without_coltypes <- system.time({
  data_tidyverse <- read_csv("~/mimic/hosp/admissions.csv.gz",
                           # Silent the Column specification
                           show_col_types = FALSE)
})
memory_read_csv_without_coltypes <- object_size(data_tidyverse)
```

```{r}
# Specifying column types based on data structure
col_types <- cols(
  subject_id = col_integer(),
  hadm_id = col_integer(),
  admittime = col_datetime(format = ""),
  dischtime = col_datetime(format = ""),
  deathtime = col_datetime(format = ""),
  admission_type = col_character(),
  admit_provider_id = col_character(),
  admission_location = col_character(),
  discharge_location = col_character(),
  insurance = col_character(),
  language = col_character(),
  marital_status = col_character(),
  race = col_character(),
  edregtime = col_datetime(format = ""),
  edouttime = col_datetime(format = ""),
  hospital_expire_flag = col_logical()
)

# Measure time and memory usage for read_csv with col_types
time_read_csv_coltypes <- system.time({
  data_tidyverse_coltypes <- read_csv("~/mimic/hosp/admissions.csv.gz",
                                      col_types = col_types)
})
memory_read_csv_coltypes <- object_size(data_tidyverse_coltypes)
```

```{r}
# Compare the results
cat("Runtime with col_types specified: ", time_read_csv_coltypes["elapsed"],
    " seconds\n")
cat("Memory usage with col_types specified: ", memory_read_csv_coltypes,
    " bytes\n")
cat("Runtime without col_types: ", time_read_csv_without_coltypes["elapsed"],
    " seconds\n")
cat("Memory usage without col_types: ", memory_read_csv_without_coltypes,
    " bytes\n")
```
- Runtime change: Yes, the runtime with the `col_types` specified is slightly lower than the runtime without `col_types`. This indicates that specifying column types increased the loading speed by a minor difference.
  
- Memory usage: The memory usage is **63,470,560 bytes** with the `col_types` specified and **70,022,592 bytes** with `read_csv`. The difference in memory usage is huge (**6552032 bytes**), meaning that specifying column types will optimize the memory instead of
using default types where double takes more memory in case we have integer types.


## Q2. Ingest big data files

<p align="center">
  <img src="./images/bigfile.png" width="50%">
</p>

### Solution 2.1 Ingest `labevents.csv.gz` by `read_csv`

<p align="center">
  <img src="./images/readr_logo.png" width="20%">
</p>

Try to ingest `labevents.csv.gz` using `read_csv`. What happens? If it takes more than 3 minutes on your computer, then abort the program and report your findings. 

```{r}
#| eval: false
library(readr)
system.time({
  labevents_data <- read_csv("~/mimic/hosp/labevents.csv.gz")
})

```
- It took more than 3 minutes.

**Reason for unable to load the data**

```{bash}
ls -l ~/mimic/hosp/labevents.csv.gz
```

```{r}
cat("Memory of labevents.csv.gz: ", 2592909134*9.5367e-7, " MiB\n")
```

`read_csv` cannot ingest `labevents.csv.gz` because the available ram is ~284 MiB where as
 the compressed file `labevents.csv.gz` requires about 2473 MiB.

### Solution 2.2 Ingest selected columns of `labevents.csv.gz` by `read_csv`

Try to ingest only columns `subject_id`, `itemid`, `charttime`, and `valuenum` in `labevents.csv.gz` using `read_csv`.  Does this solve the ingestion issue? (Hint: `col_select` argument in `read_csv`.)

```{r}
#| eval: false
labevents_data <- read_csv("~/mimic/hosp/labevents.csv.gz",
                      col_select = c(subject_id, itemid, charttime, valuenum))

# Check the data
head(labevents_data)
```
- It took more than 3 minutes

**Reason for unable to load the data**

```{bash}
zcat < ~/mimic/hosp/labevents.csv.gz | wc -l
```

```{r}
subject_id_one_row = 4 # integer is 4 bytes
itemid_one_row = 4 # integer is 4 bytes
valuenum_one_row = 8 # double is 8 bytes
charttime_one_row = 4 # timestamp is 4 bytes
one_row_total = subject_id_one_row + itemid_one_row + valuenum_one_row
one_row_total = one_row_total + charttime_one_row

# Total rows from above cell's output
total_rows = 158374765
cat("Memory required with colselect labevents.csv.gz: ",
    one_row_total * total_rows * 9.5367e-7, " MiB\n")
```

`read_csv` cannot ingest `labevents.csv.gz` with selected columns too because the available ram is ~284 MiB where as memory required requires about 3021 MiB.

### Solution 2.3 Ingest a subset of `labevents.csv.gz`

<p align="center">
  <img src="./images/linux_logo.png" width="20%">
</p>

Our first strategy to handle this big data file is to make a subset of the `labevents` data.  Read the [MIMIC documentation](https://mimic.mit.edu/docs/iv/modules/hosp/labevents/) for the content in data file `labevents.csv`.

In later exercises, we will only be interested in the following lab items: creatinine (50912), potassium (50971), sodium (50983), chloride (50902), bicarbonate (50882), hematocrit (51221), white blood cell count (51301), and glucose (50931) and the following columns: `subject_id`, `itemid`, `charttime`, `valuenum`. Write a Bash command to extract these columns and rows from `labevents.csv.gz` and save the result to a new file `labevents_filtered.csv.gz` in the current working directory. (Hint: Use `zcat <` to pipe the output of `labevents.csv.gz` to `awk` and then to `gzip` to compress the output. Do **not** put `labevents_filtered.csv.gz` in Git! To save render time, you can put `#| eval: false` at the beginning of this code chunk. TA will change it to `#| eval: true` before rendering your qmd file.)

Display the first 10 lines of the new file `labevents_filtered.csv.gz`. How many lines are in this new file, excluding the header? How long does it take `read_csv` to ingest `labevents_filtered.csv.gz`?


```{bash}
#| eval: false
zcat < ~/mimic/hosp/labevents.csv.gz | \
awk -F, 'BEGIN {OFS = ","} 

{
    if ($5 == 50912 || $5 == 50971 || $5 == 50983 || 
        $5 == 50902 || $5 == 50882 || $5 == 51221 || 
        $5 == 51301 || $5 == 50931)
        print $2, $5, $7, $10
}' | gzip > labevents_filtered.csv.gz
```



```{r}
time_taken <- system.time({
  labevents_filtered <- read_csv("./labevents_filtered.csv.gz",
    col_names = FALSE,
    col_types = cols(
      subject_id = col_integer(),
      itemid = col_integer(),
      charttime = col_datetime(),
      valuenum = col_double()
    ))
  colnames(labevents_filtered) <- c("subject_id", "itemid",
                                    "charttime", "valuenum")
})
```


```{r}
# Printing the time taken
print(time_taken)
head(labevents_filtered, 10)
```

It took about 16 seconds overall to load the file, out of which 9.741 seconds were spent running your R code (user time), and about 3 seconds were used by the system for tasks like file I/O. The remaining time could be due to overhead like waiting for resources, parallel processing inefficiencies, or other factors.

```{r}
print(nrow(labevents_filtered))
print(ncol(labevents_filtered))
```


### Solution 2.4 Ingest `labevents.csv` by Apache Arrow

<p align="center">
  <img src="./images/arrow_logo.png" width="30%">
</p>

Our second strategy is to use [Apache Arrow](https://arrow.apache.org/) for larger-than-memory data analytics. Unfortunately Arrow does not work with gz files directly. First decompress `labevents.csv.gz` to `labevents.csv` and put it in the current working directory (do not add it in git!). To save render time, put `#| eval: false` at the beginning of this code chunk. TA will change it to `#| eval: true` when rendering your qmd file.

Then use [`arrow::open_dataset`](https://arrow.apache.org/docs/r/reference/open_dataset.html) to ingest `labevents.csv`, select columns, and filter `itemid` as in Q2.3. How long does the ingest+select+filter process take? Display the number of rows and the first 10 rows of the result tibble, and make sure they match those in Q2.3. (Hint: use `dplyr` verbs for selecting columns and filtering rows.)

Write a few sentences to explain what is Apache Arrow. Imagine you want to explain it to a layman in an elevator. 

```{r}
#| eval: false
system("gunzip -k ./labevents_filtered.csv.gz")
```

```{r}
library(arrow)
library(dplyr)

# Measure time taken for ingestion, selection, and filtering using Apache Arrow
time_taken_arrow <- system.time({
  # Load the dataset using Apache Arrow
  dataset <- open_dataset("./labevents_filtered.csv",format = "csv")

  # Select the relevant columns and filter based on the 'itemid' values
  # The itemid values correspond to the following lab items:
  # Creatinine (50912), Potassium (50971), Sodium (50983), Chloride (50902),
  # Bicarbonate (50882), Hematocrit (51221), White blood cell count (51301),
  # and Glucose (50931)
  result <- dataset %>%
    select(subject_id, itemid, charttime, valuenum) %>%
    filter(itemid %in% c(50912, 50971, 50983, 50902, 50882, 
                         51221, 51301, 50931))
    

  # Collect the result as a tibble
  result_tibble <- result %>%
    collect()
})

# Print the time taken for the entire process
print(time_taken_arrow)

# Display the number of rows and the first 10 rows of the result tibble
print(nrow(result_tibble))
print(head(result_tibble, 10))
```

The process of ingesting, selecting columns, and filtering rows using Apache Arrow took approximately 3.9 seconds in total. This includes:
- User time: 3.8 seconds for executing code.
- System time: 0.67 seconds for system-level operations.

Apache Arrow is a framework that enhances data processing by providing an efficient in-memory columnar format for large datasets. It allows data to be processed quickly and shared across different programming languages without needing to copy data. This makes it highly suitable for modern data analytics pipelines, especially when working with datasets that are too large to fit into memory.

### Solution 2.5 Compress `labevents.csv` to Parquet format and ingest/select/filter

<p align="center">
  <img src="./images/parquet_logo.png" width="30%">
</p>

Re-write the csv file `labevents.csv` in the binary Parquet format (Hint: [`arrow::write_dataset`](https://arrow.apache.org/docs/r/reference/write_dataset.html).) How large is the Parquet file(s)? How long does the ingest+select+filter process of the Parquet file(s) take? Display the number of rows and the first 10 rows of the result tibble and make sure they match those in Q2.3. (Hint: use `dplyr` verbs for selecting columns and filtering rows.)

Write a few sentences to explain what is the Parquet format. Imagine you want to explain it to a layman in an elevator.

```{r}
library(arrow)
library(dplyr)

# Write the CSV file to Parquet format
arrow::write_dataset(
  open_dataset("./labevents_filtered.csv", format = "csv"),
  path = "./labevents_filtered.parque",
  format = "parquet"
)

# Check the size of the Parquet file
parquet_file_info <- file.info("./labevents_filtered.parquet")
print(parquet_file_info$size)
```


```{r}
# Measure the time taken for ingestion, selection, and filtering using
# Parquet format
time_taken_parquet <- system.time({
  # Load the Parquet dataset
  dataset_parquet <- open_dataset("./labevents_filtered.parquet",
                                  format = "parquet")
  
  # Select relevant columns and filter based on itemid values
  result_parquet <- dataset_parquet %>%
    select(subject_id, itemid, charttime, valuenum) %>%
    filter(itemid %in% c(50912, 50971, 50983, 50902,
                         50882, 51221, 51301, 50931)) %>%
    collect()
})

# Print the time taken for the process
print(time_taken_parquet)

# Display the number of rows and the first 10 rows of the result tibble
print(nrow(result_parquet))
print(head(result_parquet, 10))
```
The process of ingesting, selecting, and filtering the Parquet file took 0.611 seconds, with 32,679,896 rows in the filtered data. This shows Parquet's efficiency compared to CSV for handling large datasets.

Parquet is a special file format designed to store large amounts of data efficiently. Unlike regular text files like CSV, Parquet compresses the data, making it smaller and faster to work with. It also organizes data in a way that allows programs to quickly find and read only the parts they need, rather than loading the entire file. This saves time and space, especially when dealing with big datasets.

### Solution 2.6 DuckDB

<p align="center">
  <img src="./images/duckdb_logo.png" width="20%">
</p>

Ingest the Parquet file, convert it to a DuckDB table by [`arrow::to_duckdb`](https://arrow.apache.org/docs/r/reference/to_duckdb.html), select columns, and filter rows as in Q2.5. How long does the ingest+convert+select+filter process take? Display the number of rows and the first 10 rows of the result tibble and make sure they match those in Q2.3. (Hint: use `dplyr` verbs for selecting columns and filtering rows.)

Write a few sentences to explain what is DuckDB. Imagine you want to explain it to a layman in an elevator.

```{r}
library(arrow)
library(duckdb)
library(dplyr)

# Measure time taken for the entire process
time_taken_duckdb <- system.time({
  # Ingest Parquet file and convert it to a DuckDB table
  duckdb_table <- to_duckdb(
    open_dataset("./labevents_filtered.parquet", format = "parquet")
  )
  
  # Select relevant columns and filter based on itemid values
  result_duckdb <- duckdb_table %>%
    select(subject_id, itemid, charttime, valuenum) %>%
    filter(itemid %in% c(50912, 50971, 50983, 50902,
                         50882, 51221, 51301, 50931)) %>%
    collect()
})

# Print the time taken for the entire process
print(time_taken_duckdb)

# Display the number of rows and the first 10 rows of the result tibble
print(nrow(result_duckdb))
print(head(result_duckdb, 10))

```

The process of ingesting the Parquet file, converting it to a DuckDB table, and selecting and filtering data took 1.11 seconds, with 32,679,896 rows in the filtered result.

DuckDB is like a mini, super-fast database that runs right on your computer without needing to set up any complex systems. It’s designed to handle big datasets quickly and efficiently, much like big databases such as SQLite, but is specifically optimized for analytics and processing large files, including Parquet files.


## Q3. Ingest and filter `chartevents.csv.gz`

[`chartevents.csv.gz`](https://mimic.mit.edu/docs/iv/modules/icu/chartevents/) contains all the charted data available for a patient. During their ICU stay, the primary repository of a patient’s information is their electronic chart. The `itemid` variable indicates a single measurement type in the database. The `value` variable is the value measured for `itemid`. The first 10 lines of `chartevents.csv.gz` are

```{bash}
#| eval: false
zcat < ~/mimic/icu/chartevents.csv.gz | head -10
```
How many rows? 433 millions.

```{bash}
#| eval: false
zcat < ~/mimic/icu/chartevents.csv.gz | tail -n +2 | wc -l
```

[`d_items.csv.gz`](https://mimic.mit.edu/docs/iv/modules/icu/d_items/) is the dictionary for the `itemid` in `chartevents.csv.gz`.

```{bash}
#| eval: false
zcat < ~/mimic/icu/d_items.csv.gz | head -10
```

In later exercises, we are interested in the vitals for ICU patients: heart rate (220045), mean non-invasive blood pressure (220181), systolic non-invasive blood pressure (220179), body temperature in Fahrenheit (223761), and respiratory rate (220210). Retrieve a subset of `chartevents.csv.gz` only containing these items, using the favorite method you learnt in Q2. 

Document the steps and show code. Display the number of rows and the first 10 rows of the result tibble.

### Solution 3 : Apache arrow method

```{bash}
#| eval: false
zcat < ~/mimic/icu/chartevents.csv.gz | \
awk -F, 'BEGIN {OFS = ","} 

{
    if ($7 == 220045 || $7 == 220181 || $5 == 220179 || 
        $7 == 223761 || $7 == 220210)
        print $1, $5, $7, $9
}' | gzip > chartevents_filtered.csv.gz


```


```{r}
system("gunzip -k ./chartevents_filtered.csv.gz")
```


```{r}
library(arrow)
library(dplyr)

# Measure time taken for ingestion, selection, and filtering using Apache Arrow
time_taken_arrow <- system.time({
  # Load the dataset using Apache Arrow
  dataset <- open_dataset("./chartevents_filtered.csv", format = "csv")

  # Assuming the correct column names from the schema, rename accordingly
  # Update these names based on the actual schema
  renamed_dataset <- dataset %>%
    rename(
      # Replace with actual subject_id column name
      subject_id = `10000032`,
      # Replace with actual charttime column name
      charttime = `2180-07-23 14:00:00`,
      # Replace with actual item_id column name
      item_id = `223761`,
      # Replace with actual valuenum column name
      valuenum = `98.7`           
    )
  
  # Select the relevant columns and filter based on the 'item_id' values
  result <- renamed_dataset %>%
    select(subject_id, charttime, item_id, valuenum) %>%
    filter(item_id %in% c(220045, 220181, 220179, 223761, 220210))

  # Collect the result as a tibble
  result_tibble <- result %>%
    collect()
})

# Print the time taken for the entire process
print(time_taken_arrow)

# Display the number of rows and the first 10 rows of the result tibble
print(nrow(result_tibble))
print(ncol(result_tibble))
print(head(result_tibble, 10))
```


```{bash}
# Check number of rows in original compressed file including header
zcat < chartevents_filtered.csv.gz | tail -n +2 | wc -l
```

```{bash}
# Check number of columns
zcat < chartevents_filtered.csv.gz | head -n 1 | awk -F',' '{print NF}'
```


The number of rows(24816685) and columns(4) match correctly in the compressed file and the loaded dataset.

- Ingests: Reads the CSV file using Apache Arrow's open_dataset(), which is designed to handle larger-than-memory datasets efficiently.
- Renames Columns: Changes the names of the columns from their raw schema format to more understandable ones (subject_id, charttime, etc.).
- Selects and Filters: Focuses on specific columns and filters the rows based on conditions applied to the item_id column.
- Collects the Data: The result is collected into a local tibble, allowing it to be printed and analyzed in memory.
- Timing: Measures the time taken for the entire process of ingestion, renaming, selection, filtering, and collection.

The process of loading the dataset using Apache Arrow, selecting relevant columns, and filtering based on item IDs took around 2.82 seconds and resulted in a dataset with 24.8 million rows. This demonstrates the efficiency of using Apache Arrow for handling large datasets.




